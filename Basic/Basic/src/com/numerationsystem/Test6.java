package com.numerationsystem;

public class Test6 {
    public static void main(String[] args) {
//        TODO
        /*
         * 位运算
         * & 二进制数据对应位相都位1时，结果才为1，否则为0
         * | 二进制数据对应位相都位0时，结果才为0，否则为1
         * */

        /*
         * 3的二进制 0000 0011
         * 6的二进制 0000 0110
         * 3 & 6：  0000 0010
         * 2的二进制 0000 0010
         * */

        System.out.println(3 & 6); // 2

        /*
         * 3的二进制 0000 0011
         * 6的二进制 0000 0110
         * 3 | 6：  0000 0111
         * 7的二进制 0000 0111
         * */

        System.out.println(3 | 6); // 7

        /*
         * 按位取反：0变1，1变0
         * 9的二进制 0000 1001
         * ~9：     1111 0110
         * */
        System.out.println(~9); // -10

        /*
         * 异或运算：相同为0，不同为1
         * 3的二进制 0000 0011
         * 6的二进制 0000 0110
         * 3 ^ 6：  0000 0101
         * 5的二进制 0000 0101
         * */

        System.out.println(3 ^ 6); // 5

        /*
         * >> 右移运算符，num >> 1,相当于num除以2
         * */
        System.out.println(6 >> 1); // 3

        /*
         * << 左移运算符，num << 1,相当于num乘以2
         * */

        System.out.println(6 << 1); // 12

        /*
         * >>> 无符号右移，忽略符号位，空位都以0补齐
         * */
        System.out.println(-6 >>> 1); // 2147483645

        /*
         * 无符号右移运算符>>>，它的运算规则是：
         * 1.无论是正数还是负数，高位通通补0，低位的值保持不变。
         * 2.无符号右移运算符的运算速度要快于右移运算符，因为右移运算符要考虑符号位，而无符号右移运算符不用。
         * */

        /*
         * <<< 无符号左移，忽略符号位，空位都以0补齐
         * */

        System.out.println(-6 << 1); // -12

    }
}
